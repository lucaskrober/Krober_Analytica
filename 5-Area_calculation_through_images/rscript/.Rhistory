codestproc='h21701-2018'
ssql<-script(
"SELECT\n",
" ep.codigo estproc,\n",
" faz.descricao fazenda,\n",
" prj.codigo projeto,\n",
" tal.descricao talhao,\n",
" mg.codigo matgen,\n",
" parc.id idparcela,\n",
" parc.codigo parcela,\n",
" parc.area,\n",
" parc.raio_lado1 raio,\n",
" ST_X(ST_transform(gprc.geom,gprc.srid)) x,\n",
" ST_Y(ST_transform(gprc.geom,gprc.srid)) y,\n",
" pm.datamedicao,\n",
" fm.fila,\n",
" fm.cova,\n",
" fm.fuste,\n",
" fm.dap dap1,\n",
" round(fm.ht::numeric,2) alt1,\n",
" cat.codigo cat0\n",
"FROM \n",
" inv.estproc ep \n",
" JOIN inv.f_id_estprocnum_max(ep.id) epn ON (\n",
"  and ep.codigo in ", cmrsample::ssql_vqdata(con,codestproc),"\n",
"  and ep.ativo=TRUE \n",
"  and ep.id = epn.idestproc)\n",
" JOIN inv.epn_plantio epnp ON epn.idestprocnum = epnp.idestprocnum\n",
" JOIN cdf.plantio plt on epnp.idplantio = plt.id\n",
" JOIN cdf.talhao tal on plt.idtalhao = tal.id\n",
" JOIN cdf.projeto prj on tal.idprojeto = prj.id\n",
" JOIN cdf.fazenda faz on prj.idfazenda = faz.id\n",
" JOIN cdf.matgen mg ON plt.idmatgen = mg.id\n",
" JOIN inv.parcplan pp ON plt.id = pp.idplantio and pp.ativo = true\n",
" JOIN inv.parcela parc ON pp.idparcela = parc.id and parc.ativo = true\n",
" JOIN gis.gparcela gprc ON parc.id = gprc.idparcela AND gprc.ativo = true\n",
" JOIN inv.f_parcmed_mensurada_max(parc.id) pmm ON parc.id = pmm.idparcela\n",
" JOIN inv.parcmed pm on pmm.idparcmed = pm.id\n",
" JOIN inv.fustemed fm on  pm.id = fm.idparcmed\n",
" JOIN inv.categoria cat on  fm.idcategoria = cat.id\n",
"ORDER BY \n",
" parc.codigo, fm.fila, fm.cova, fm.fuste"
);
fm<-DBI::dbGetQuery(con,ssql)
ssql<-script(
"SELECT\n",
" ep.codigo estproc,\n",
" faz.descricao fazenda,\n",
" prj.codigo projeto,\n",
" tal.descricao talhao,\n",
" mg.codigo matgen,\n",
" parc.id idparcela,\n",
" parc.codigo parcela,\n",
" parc.area,\n",
" parc.raio_lado1 raio,\n",
" ST_X(ST_transform(gprc.geom,gprc.srid)) x,\n",
" ST_Y(ST_transform(gprc.geom,gprc.srid)) y,\n",
" pm.datamedicao,\n",
" fm.fila,\n",
" fm.cova,\n",
" fm.fuste,\n",
" fm.dap dap1,\n",
" round(fm.ht::numeric,2) alt1,\n",
" cat.codigo cat0\n",
"FROM \n",
" inv.estproc ep \n",
" JOIN inv.f_id_estprocnum_max(ep.id) epn ON (\n",
"  ep.codigo in ", cmrsample::ssql_vqdata(con,codestproc),"\n",
"  and ep.ativo=TRUE \n",
"  and ep.id = epn.idestproc)\n",
" JOIN inv.epn_plantio epnp ON epn.idestprocnum = epnp.idestprocnum\n",
" JOIN cdf.plantio plt on epnp.idplantio = plt.id\n",
" JOIN cdf.talhao tal on plt.idtalhao = tal.id\n",
" JOIN cdf.projeto prj on tal.idprojeto = prj.id\n",
" JOIN cdf.fazenda faz on prj.idfazenda = faz.id\n",
" JOIN cdf.matgen mg ON plt.idmatgen = mg.id\n",
" JOIN inv.parcplan pp ON plt.id = pp.idplantio and pp.ativo = true\n",
" JOIN inv.parcela parc ON pp.idparcela = parc.id and parc.ativo = true\n",
" JOIN gis.gparcela gprc ON parc.id = gprc.idparcela AND gprc.ativo = true\n",
" JOIN inv.f_parcmed_mensurada_max(parc.id) pmm ON parc.id = pmm.idparcela\n",
" JOIN inv.parcmed pm on pmm.idparcmed = pm.id\n",
" JOIN inv.fustemed fm on  pm.id = fm.idparcmed\n",
" JOIN inv.categoria cat on  fm.idcategoria = cat.id\n",
"ORDER BY \n",
" parc.codigo, fm.fila, fm.cova, fm.fuste"
);
fm<-DBI::dbGetQuery(con,ssql)
unique(fm$parcela)
fm$parcela<-as.integer(fm$parcela)
pm<-subset(fm,parcela<100,c('idparcela','parcela'))
pm<-subset(fm,!duplicated(parcela) & parcela<100,c('idparcela','parcela'))
View(pm)
library(cmrsample)
?ssql_update
pm$ativo=F
pm$id<-pm$idparcela
ssql_update(con,pm,inv,parcela,'ativo','id')
ssql_update(con,pm,'inv','parcela','ativo','id')
ssql
ssql<-ssql_update(con,pm,'inv','parcela','ativo','id')
ssql
DBI:dbSendUpdate(con, ssql)
DBI::dbSendUpdate(con, ssql)
RJDBC::dbSendUpdate(con,ssql)
ssql<-script(
"SELECT\n",
" ep.codigo estproc,\n",
" faz.descricao fazenda,\n",
" prj.codigo projeto,\n",
" tal.descricao talhao,\n",
" mg.codigo matgen,\n",
" parc.id idparcela,\n",
" parc.codigo parcela,\n",
" parc.area,\n",
" parc.raio_lado1 raio,\n",
" ST_X(ST_transform(gprc.geom,gprc.srid)) x,\n",
" ST_Y(ST_transform(gprc.geom,gprc.srid)) y,\n",
" pm.datamedicao,\n",
" fm.fila,\n",
" fm.cova,\n",
" fm.fuste,\n",
" fm.dap dap1,\n",
" round(fm.ht::numeric,2) alt1,\n",
" cat.codigo cat0\n",
"FROM \n",
" inv.estproc ep \n",
" JOIN inv.f_id_estprocnum_max(ep.id) epn ON (\n",
"  ep.codigo in ", cmrsample::ssql_vqdata(con,codestproc),"\n",
"  and ep.ativo=TRUE \n",
"  and ep.id = epn.idestproc)\n",
" JOIN inv.epn_plantio epnp ON epn.idestprocnum = epnp.idestprocnum\n",
" JOIN cdf.plantio plt on epnp.idplantio = plt.id\n",
" JOIN cdf.talhao tal on plt.idtalhao = tal.id\n",
" JOIN cdf.projeto prj on tal.idprojeto = prj.id\n",
" JOIN cdf.fazenda faz on prj.idfazenda = faz.id\n",
" JOIN cdf.matgen mg ON plt.idmatgen = mg.id\n",
" JOIN inv.parcplan pp ON plt.id = pp.idplantio and pp.ativo = true\n",
" JOIN inv.parcela parc ON pp.idparcela = parc.id and parc.ativo = true\n",
" JOIN gis.gparcela gprc ON parc.id = gprc.idparcela AND gprc.ativo = true\n",
" JOIN inv.f_parcmed_mensurada_max(parc.id) pmm ON parc.id = pmm.idparcela\n",
" JOIN inv.parcmed pm on pmm.idparcmed = pm.id\n",
" JOIN inv.fustemed fm on  pm.id = fm.idparcmed\n",
" JOIN inv.categoria cat on  fm.idcategoria = cat.id\n",
"ORDER BY \n",
" parc.codigo, fm.fila, fm.cova, fm.fuste"
);
fm<-DBI::dbGetQuery(con,ssql)
unique(fm$parcela)
head(fm)
View(fm)
unique(fm$datamedicao)
pm$ativo=T
pm
ssql<-ssql_update(con,pm,'inv','parcela','ativo','id')
ssql
RJDBC::dbSendUpdate(con,ssql)
ssql<-script(
"SELECT\n",
" ep.codigo estproc,\n",
" faz.descricao fazenda,\n",
" prj.codigo projeto,\n",
" tal.descricao talhao,\n",
" mg.codigo matgen,\n",
" parc.id idparcela,\n",
" parc.codigo parcela,\n",
" parc.area,\n",
" parc.raio_lado1 raio,\n",
" ST_X(ST_transform(gprc.geom,gprc.srid)) x,\n",
" ST_Y(ST_transform(gprc.geom,gprc.srid)) y,\n",
" pm.datamedicao,\n",
" fm.fila,\n",
" fm.cova,\n",
" fm.fuste,\n",
" fm.dap dap1,\n",
" round(fm.ht::numeric,2) alt1,\n",
" cat.codigo cat0\n",
"FROM \n",
" inv.estproc ep \n",
" JOIN inv.f_id_estprocnum_max(ep.id) epn ON (\n",
"  ep.codigo in ", cmrsample::ssql_vqdata(con,codestproc),"\n",
"  and ep.ativo=TRUE \n",
"  and ep.id = epn.idestproc)\n",
" JOIN inv.epn_plantio epnp ON epn.idestprocnum = epnp.idestprocnum\n",
" JOIN cdf.plantio plt on epnp.idplantio = plt.id\n",
" JOIN cdf.talhao tal on plt.idtalhao = tal.id\n",
" JOIN cdf.projeto prj on tal.idprojeto = prj.id\n",
" JOIN cdf.fazenda faz on prj.idfazenda = faz.id\n",
" JOIN cdf.matgen mg ON plt.idmatgen = mg.id\n",
" JOIN inv.parcplan pp ON plt.id = pp.idplantio and pp.ativo = true\n",
" JOIN inv.parcela parc ON pp.idparcela = parc.id and parc.ativo = true\n",
" JOIN gis.gparcela gprc ON parc.id = gprc.idparcela AND gprc.ativo = true\n",
" JOIN inv.f_parcmed_mensurada_max(parc.id) pmm ON parc.id = pmm.idparcela\n",
" JOIN inv.parcmed pm on pmm.idparcmed = pm.id\n",
" JOIN inv.fustemed fm on  pm.id = fm.idparcmed\n",
" JOIN inv.categoria cat on  fm.idcategoria = cat.id\n",
"ORDER BY \n",
" parc.codigo, fm.fila, fm.cova, fm.fuste"
);
fm<-DBI::dbGetQuery(con,ssql)
View(vm)
View(fm)
fm$parcela<-as.integer(fm$parcela)
pm<-subset(fm,!duplicated(parcela) & parcela>=100,c('idparcela','parcela'))
unique(fm$datamedicao[fm$parcela>100])
pm$id<-pm$idparcela
pm$ativo=F
View(pm)
ssql<-ssql_update(con,pm,'inv','parcela','ativo','id')
ssql
RJDBC::dbSendUpdate(con,ssql)
ssql<-script(
"SELECT\n",
" ep.codigo estproc,\n",
" faz.descricao fazenda,\n",
" prj.codigo projeto,\n",
" tal.descricao talhao,\n",
" mg.codigo matgen,\n",
" parc.id idparcela,\n",
" parc.codigo parcela,\n",
" parc.area,\n",
" parc.raio_lado1 raio,\n",
" ST_X(ST_transform(gprc.geom,gprc.srid)) x,\n",
" ST_Y(ST_transform(gprc.geom,gprc.srid)) y,\n",
" pm.datamedicao,\n",
" fm.fila,\n",
" fm.cova,\n",
" fm.fuste,\n",
" fm.dap dap1,\n",
" round(fm.ht::numeric,2) alt1,\n",
" cat.codigo cat0\n",
"FROM \n",
" inv.estproc ep \n",
" JOIN inv.f_id_estprocnum_max(ep.id) epn ON (\n",
"  ep.codigo in ", cmrsample::ssql_vqdata(con,codestproc),"\n",
"  and ep.ativo=TRUE \n",
"  and ep.id = epn.idestproc)\n",
" JOIN inv.epn_plantio epnp ON epn.idestprocnum = epnp.idestprocnum\n",
" JOIN cdf.plantio plt on epnp.idplantio = plt.id\n",
" JOIN cdf.talhao tal on plt.idtalhao = tal.id\n",
" JOIN cdf.projeto prj on tal.idprojeto = prj.id\n",
" JOIN cdf.fazenda faz on prj.idfazenda = faz.id\n",
" JOIN cdf.matgen mg ON plt.idmatgen = mg.id\n",
" JOIN inv.parcplan pp ON plt.id = pp.idplantio and pp.ativo = true\n",
" JOIN inv.parcela parc ON pp.idparcela = parc.id and parc.ativo = true\n",
" JOIN gis.gparcela gprc ON parc.id = gprc.idparcela AND gprc.ativo = true\n",
" JOIN inv.f_parcmed_mensurada_max(parc.id) pmm ON parc.id = pmm.idparcela\n",
" JOIN inv.parcmed pm on pmm.idparcmed = pm.id\n",
" JOIN inv.fustemed fm on  pm.id = fm.idparcmed\n",
" JOIN inv.categoria cat on  fm.idcategoria = cat.id\n",
"ORDER BY \n",
" parc.codigo, fm.fila, fm.cova, fm.fuste"
);
fm<-DBI::dbGetQuery(con,ssql)
View(fm)
unique(fm$parcela)
dsave
user<-Sys.getenv("USER")
user
dsave<-file.path('/shared','projetos',user);
dsave
user<-'invlacan'
dsave<-file.path('/shared','projetos',user);
dsave
head(fm)
?writeData
options=c('umf','prcshp','pltshp')
'umf' %in% options
?nls
4130.35-4122.50
627.09+7.85
22.5*3.4
9*3.4
20/3.4
262.97/2
87.98+499.50+79.99+131.49
6247.96-798.96
5449-1895.76
182-116
setwd("/shared/ggdrive/lb_sample/rscript")
setwd("/shared/ggdrive/lb_sample/rscript")
dir_arvs<-list.dirs('../dados', full.names=T, recursive=F);
dir_arvs
fshp<-function(shp){
s<-Reduce('c',strsplit(shp,'[_.]'))
return(data.frame(
arv=as.integer(s[2]),
hi=as.numeric(ifelse(length(s)>5,paste0(s[4],".",s[5]),s[4])),
shp=file.path('..','dados',s[2],shp),stringsAsFactors = F
))
}
fahs<-function(dir_arv) Reduce('rbind',lapply(dir(dir_arv, pattern = ".shp"),fshp))
ahs<-fahs(dir_arvs);
ahs<-ahs[order(ahs$arv,ahs$hi),];
ahs
head(ahs)
dir_arvs<-list.dirs('../dados', full.names=T, recursive=F);
fshp<-function(shp){
s<-Reduce('c',strsplit(shp,'[_.]'))
return(data.frame(
arv=as.integer(s[2]),
hi=as.numeric(ifelse(length(s)>5,paste0(s[4],".",s[5]),s[4])),
shp=file.path('..','dados',s[2],shp),stringsAsFactors = F
))
}
fahs<-function(dir_arv) Reduce('rbind',lapply(dir(dir_arv, pattern = ".shp"),fshp))
ahs<-fahs(dir_arvs);
ahs<-ahs[order(ahs$arv,ahs$hi),];
ahs<-subset(ahs,arv==1)
ahs
fvol<-function(t){
cat(paste0('arv=',t$arv[1],' hi1=',t$hi[1],' hi2=',t$hi[2]),'\n')
shp1<-rgdal::readOGR(t$shp[1])
shp2<-rgdal::readOGR(t$shp[2])
shp1 <- ggplot2::fortify(shp1)
#shp1 <- shp1 %>% dplyr::select(long,lat)
shp1 <- shp1[,c('long','lat')]
shp2 <- ggplot2::fortify(shp2)
#shp2 <- shp2 %>% dplyr::select(long,lat)
shp2 <- shp2[,c('long','lat')]
shp1$z<-t$hi[1]
shp2$z<-t$hi[2]
sec1<-rbind(shp1,shp2)
names(sec1)<-c("Var1","Var2","Var3")
sec1<-as.matrix(sec1)
#output.options="Fa" pra retornar a opção de calcular as isoáreas,
#o somatório delas é igual ao volume do tetraedro resultante
return(data.frame(
arv=t$arv[1],
hi1=t$hi[1],
hi2=t$hi[2],
vol=sum(geometry::delaunayn(sec1, output.options="Fa"))$areas
))
}
fvtoras<-function(ahs) Reduce("rbind",lapply(split(ahs,ahs$arv), function(hs) Reduce("rbind",cmrsample::seqApply(hs,fvol))))
voltoras<-fvtoras(ahs)
t<-ahs[1:2,]
t
cat(paste0('arv=',t$arv[1],' hi1=',t$hi[1],' hi2=',t$hi[2]),'\n')
cat(paste0('arv=',t$arv[1],' - hi1=',t$hi[1],' - hi2=',t$hi[2]),'\n')
shp1<-rgdal::readOGR(t$shp[1])
shp2<-rgdal::readOGR(t$shp[2])
shp1 <- ggplot2::fortify(shp1)
#shp1 <- shp1 %>% dplyr::select(long,lat)
shp1 <- shp1[,c('long','lat')]
shp1
head(shp1)
shp2 <- ggplot2::fortify(shp2)
#shp2 <- shp2 %>% dplyr::select(long,lat)
shp2 <- shp2[,c('long','lat')]
shp1$z<-t$hi[1]
shp2$z<-t$hi[2]
t$hi[1]
t$hi[2]
sec1<-rbind(shp1,shp2)
head(sec1)
names(sec1)<-c("Var1","Var2","Var3")
sec1<-as.matrix(sec1)
head(sec1)
sum(geometry::delaunayn(sec1, output.options="Fa")$areas
)
fvol<-function(t){
cat(paste0('arv=',t$arv[1],' - hi1=',t$hi[1],' - hi2=',t$hi[2]),'\n')
shp1<-rgdal::readOGR(t$shp[1])
shp2<-rgdal::readOGR(t$shp[2])
shp1 <- ggplot2::fortify(shp1)
#shp1 <- shp1 %>% dplyr::select(long,lat)
shp1 <- shp1[,c('long','lat')]
shp2 <- ggplot2::fortify(shp2)
#shp2 <- shp2 %>% dplyr::select(long,lat)
shp2 <- shp2[,c('long','lat')]
shp1$z<-t$hi[1]
shp2$z<-t$hi[2]
sec1<-rbind(shp1,shp2)
names(sec1)<-c("Var1","Var2","Var3")
sec1<-as.matrix(sec1)
#output.options="Fa" pra retornar a opção de calcular as isoáreas,
#o somatório delas é igual ao volume do tetraedro resultante
return(data.frame(
arv=t$arv[1],
hi1=t$hi[1],
hi2=t$hi[2],
vol=sum(geometry::delaunayn(sec1, output.options="Fa")$areas)
))
}
fvtoras<-function(ahs) Reduce("rbind",lapply(split(ahs,ahs$arv), function(hs) Reduce("rbind",cmrsample::seqApply(hs,fvol))))
voltoras<-fvtoras(ahs)
head(voltoras)
volarv<-with(voltoras, aggregate(list(vol=vol),list(arv=arv),sum))
volarv
0.3205/0.3208
dir_arvs<-list.dirs('../dados/shp', full.names=T, recursive=F);
fshp<-function(shp){
s<-Reduce('c',strsplit(shp,'[_.]'))
return(data.frame(
arv=as.integer(s[2]),
hi=as.numeric(ifelse(length(s)>5,paste0(s[4],".",s[5]),s[4])),
shp=file.path('..','dados','shp',s[2],shp),stringsAsFactors = F
))
}
fahs<-function(dir_arv) Reduce('rbind',lapply(dir(dir_arv, pattern = ".shp"),fshp))
ahs<-fahs(dir_arvs);
ahs<-ahs[order(ahs$arv,ahs$hi),];
dir_arvs<-list.dirs('../dados/shp', full.names=T, recursive=F);
dir_arvs
fshp<-function(shp){
s<-Reduce('c',strsplit(shp,'[_.]'))
return(data.frame(
arv=as.integer(s[2]),
hi=as.numeric(ifelse(length(s)>5,paste0(s[4],".",s[5]),s[4])),
shp=file.path('..','dados','shp',s[2],shp),stringsAsFactors = F
))
}
fahs<-function(dir_arv) Reduce('rbind',lapply(dir(dir_arv, pattern = ".shp"),fshp))
ahs<-fahs(dir_arvs);
ahs
View(ahs)
ahs<-ahs[order(ahs$arv,ahs$hi),];
ahs
tail(ahs)
head(ahs)
dir_arvs
ahs<-fahs(dir_arvs);
dir_arvs<-list.dirs('../dados/shp', full.names=T, recursive=F);
dir_arvs
dir_arv<
dir_arv<-dir_arvs[1]
dir(dir_arv, pattern = ".shp")
Reduce('rbind',lapply(dir(dir_arv, pattern = ".shp"),fshp)
)
dir_arvs<-list.dirs('../dados/shp', full.names=T, recursive=F);
fshp<-function(shp){
s<-Reduce('c',strsplit(shp,'[_.]'))
return(data.frame(
arv=as.integer(s[2]),
hi=as.numeric(ifelse(length(s)>5,paste0(s[4],".",s[5]),s[4])),
shp=file.path('..','dados','shp',s[2],shp),stringsAsFactors = F
))
}
fahs<-function(dir_arv) Reduce('rbind',lapply(dir(dir_arv, pattern = ".shp"),fshp))
ahs<-fahs(dir_arvs);
ahs<-ahs[order(ahs$arv,ahs$hi),];
ahs<-subset(ahs,arv==2)
fvol<-function(t){
cat(paste0('arv=',t$arv[1],' - hi1=',t$hi[1],' - hi2=',t$hi[2]),'\n')
shp1<-rgdal::readOGR(t$shp[1])
shp2<-rgdal::readOGR(t$shp[2])
shp1 <- ggplot2::fortify(shp1)
#shp1 <- shp1 %>% dplyr::select(long,lat)
shp1 <- shp1[,c('long','lat')]
shp2 <- ggplot2::fortify(shp2)
#shp2 <- shp2 %>% dplyr::select(long,lat)
shp2 <- shp2[,c('long','lat')]
shp1$z<-t$hi[1]
shp2$z<-t$hi[2]
sec1<-rbind(shp1,shp2)
names(sec1)<-c("Var1","Var2","Var3")
sec1<-as.matrix(sec1)
#output.options="Fa" pra retornar a opção de calcular as isoáreas,
#o somatório delas é igual ao volume do tetraedro resultante
return(data.frame(
arv=t$arv[1],
hi1=t$hi[1],
hi2=t$hi[2],
vol=sum(geometry::delaunayn(sec1, output.options="Fa")$areas)
))
}
fvtoras<-function(ahs) Reduce("rbind",lapply(split(ahs,ahs$arv), function(hs) Reduce("rbind",cmrsample::seqApply(hs,fvol))))
voltoras<-fvtoras(ahs)
voltoras
volarv<-with(voltoras, aggregate(list(vol=vol),list(arv=arv),sum))
volarv
0.38644/0.3914
setwd("G:/Drives compartilhados/lb_sample/tese/rscript")
dados<-read.csv2('../dados/vol_comparativo.csv')
cub<-read.csv2('../dados/cubagem_final.csv')
names(dados)[3]<-'v_tri'
vol_fita<-read.csv2('../dados/vol_fita.csv')
vol_suta<-read.csv2('../dados/vol_suta.csv')
vol_fita<-subset(vol_fita,dicc==5)
vol_fita<-subset(vol_fita,!duplicated(idarvore))
vol_suta<-subset(vol_suta,dicc==5)
vol_suta<-subset(vol_suta,!duplicated(idarvore))
vol_suta<-vol_suta %>%
select(idarvore,vsc)
vol_fita<-vol_fita %>%
select(idarvore,vsc)
library(dplyr)
vol_suta<-vol_suta %>%
select(idarvore,vsc)
vol_fita<-vol_fita %>%
select(idarvore,vsc)
names(vol_suta)<-c('arv','v_suta')
names(vol_fita)<-c('arv','v_fita')
dados<-merge(dados,vol_suta)
dados<-merge(dados,vol_fita)
names(dados)[2]<-'v_xil'
dados$dif_tri[i]<-dado$v_tri-dados$v_xil
dados$dif_tri[i]<-dados$v_tri-dados$v_xil
dados$dif_tri<-dados$v_tri-dados$v_xil
dados$dif_tri
dif_tri_perc<-with(dados,dif_tri/v_xil)
dif_tri_perc
dif_tri_perc<-with(dados,dif_tri/v_xil*100)
dif_tri_perc
dif_tri_perc<-with(dados,dif_tri/v_tri*100)
dif_tri_perc
mean(dif_tri_perc)
dif<-with(dados,(v_tri/v_xil)-1)
dif
dif<-with(dados,(v_tri/v_xil)-1)*100
dif
mean(dif)
