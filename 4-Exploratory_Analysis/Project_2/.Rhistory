#while
sx<-0
i<-11
while(i<=length(x)){
sx<-sx+x[i];
i<-i+1
}
sx
i<-11
while(i<=length(x)){
sx<-sx+x[i];
i<-i+1
}
sx
# Criar uma função: média ponderada
x<-seq(2,20,2);x
i<-11
while(i<=length(x)){
sx<-sx+x[i];
i<-i+1
}
sx
update.packages(checkBuilt=TRUE, ask=FALSE)
3.0689/3.033
t_rep<-as.vector(c(10,9.4,11,5.3,4.4,2.2,5.7,8.9,10,11))
tip_cons<-as.factor(c(1,0,1,0,1,1,0,0,1,1))
meses<-as.vector(2.3,2.2,3.1,1.4,1.1,0.8,1.5,2.0,2.4,2.5)
meses<-as.vector(c(2.3,2.2,3.1,1.4,1.1,0.8,1.5,2.0,2.4,2.5))
dados<-data.frame(t_rep,tip_cons,meses)
View(dados)
View(dados)
reg<-lm(t_rep ~ meses + tip_cons, data=dados)
reg
summary(reg)
syx=summary(reg)$sigma
syx
syx=summary(reg)$sigma
syx
summary(reg)
summary(reg)$sigma
syx<-summary(reg)$sigma
syx
syx
summary(reg)
betas<-coef(reg)
betas
bs<-list(coef(reg))
bs
bs<-as.list(coef(reg))
bs
options(DecOut = ',')
betas
?DecOut
?dec.out
?options
options(scipiens=30, digits=12)
betas<-coef(reg)
betas
options(OutDec = ',')
betas
options(scipiens=30, digits=8)
betas
summary(reg)
anova(reg)
T_est = -0.26672979 + 4.27703087*3 + -0.32989964*as.factor(0)
T_est = -0.26672979 + 4.27703087*3 + -0.32989964*0
T_est
estimados<-predict(reg)
estimados
res<-residuals(reg)
res
plot(estimados,res)
plot(estimados,res,ylim=c(-1.5,1.5))
abline(h=0)
plot(estimados,res,ylim=c(-2,2))
abline(h=0)
plot(estimados,res,ylim=c(-2,2),pch=20)
abline(h=0)
rstudent(reg)
rstd<-rstudent(reg)
plot(estimados,rstd,pch=20)
plot(estimados,rstd,pch=20,ylim=c(-6.5,6.5))
summary(reg)
x11()
par(mfrow=c(2,2))
plot(estimados,res,pch=20)
abline(h=0)
plot(estimados,res,ylim=c(-2,2)pch=20)
abline(h=0)
plot(estimados,res,ylim=c(-2,2),pch=20)
abline(h=0)
plot(estimados,res,ylim=c(-4,4),pch=20)
abline(h=0)
plot(estimados,res,ylim=c(-10,10),pch=20)
abline(h=0)
anova(reg)
summary(reg)
anova(reg)
summary(reg)
######################################################################
#########     Exemplo RegressÃ£o Linear MÃºltipla          #############
#########          Monica Fabiana B. M. Thiersch         #############
#########                  ENPE B/2020/2                    #############
######################################################################
rm(list=ls(all=TRUE));
library(fBasics);
# Dados y = lucro anual de empresas; x1=capital investido; x2=gasto com publicidade
Y=matrix(c(12,3,11,1,13,20,2,25,26,15,1,15,11,5,7), ncol=1, nrow=15);
x1=matrix(c(18,16,25,12,20,35,17,25,39,20,18,29,20,16,29), ncol=1, nrow=15);
x2=matrix(c(2,3,2,3,3,2,1.5,5,1,2.5,2,3.5,5,1,1.5), ncol=1,nrow=15);
#Ajuste utilizando a funÃ§Ã£o lm
aj=lm(Y~x1+x2);
summary(aj)
anova(aj)
citation()
R.version
# Dados y = lucro anual de empresas; x1=capital investido; x2=gasto com publicidade
Y=matrix(c(12,3,11,1,13,20,2,25,26,15,1,15,11,5,7), ncol=1, nrow=15);
x1=matrix(c(18,16,25,12,20,35,17,25,39,20,18,29,20,16,29), ncol=1, nrow=15);
x2=matrix(c(2,3,2,3,3,2,1.5,5,1,2.5,2,3.5,5,1,1.5), ncol=1,nrow=15);
cor(x1,Y)
cor(Y,x1)
?Expedes.pt
install.packages("ExpDes.pt")
library(ExpDes.pt)
library(ExpDes.pt)
data()
data(ex2)
?ExpDes.pt
??ExpDes.pt
data(est21Ad)
force(est21Ad)
force(ex2)
View(ex2)
mod<-lm(aparencia~provador+trat,data=ex2)
mod
summary(mod)
mod<-lm(aparencia~trat*provador,data=ex2)
summary(mod)
ex2$provador<-factor(ex2$provador)
mod<-lm(aparencia~trat*provador,data=ex2)
summary(mod)
mod<-lm(aparencia~provador+trat,data=ex2)
summary(mod)
anova<-aov(aparência ~ provador + trat,data=ex2)
anova<-aov(aparencia ~ provador + trat,data=ex2)
summary(anova)
install.packages("TukeyC")
library(TukeyC)
cv(anova)
TukeyHSD(anova)
tuk<-TukeyHSD(anova)
View(tuk)
tuk[["provador"]]
view(tuk[["provador"]])
View(tuk[["provador"]])
max(tuk[["provador"]]$diff)
max(tuk[["provador"]])
install.packages("easyanova")
?easyanova
library(easyanova)
?easyanova
?ea1
ea1(data=ex2,design=1,alpha=0.05)
data(ex2)
ea1(data=ex2,design=1,alpha=0.05)
ea1(ex2[,c(1,2,3)],design=2,plot=3)
359,78*4
359.78*4
359.78*3
359.78*2
359.78*2.5
276.75*8
276.75*4
1107+899.45
276.75*5
359.78*3
276.75*5+359.78*3
library(cmrinvflor)
?class_sitio_dif_alg
?class_sitio_cur_med
?cmrinvflor
?`cmrinvflor-package`
560+229+229+633
2**1000
?fortify
# libraries
library(ggraph)
library(igraph)
# libraries
library(ggraph)
# libraries
library(ggraph)
install.packages("ggplot2")
# libraries
library(ggraph)
install.packages("ggplot2")
install.packages("ggraph")
install.packages("igraph")
install.packages("tidyverse")
install.packages(c("ade4", "adegenet", "ape", "bayesplot", "bayestestR", "berryFunctions", "blob", "boot", "bridgesampling", "brio", "brms", "bslib", "cachem", "car", "class", "cluster", "colorspace", "corrplot", "cpp11", "cubature", "curl", "dendextend", "DEoptimR", "DescTools", "diffobj", "doBy", "dplyr", "DT", "e1071", "effectsize", "ellipsis", "emmeans", "fansi", "FSA", "ggeffects", "ggsignif", "gifski", "glmmTMB", "Gmedian", "gss", "gtools", "haven", "highr", "hms", "HSAUR3", "httpuv", "inline", "insight", "isoband", "jpeg", "jquerylib", "KernSmooth", "knitr", "later", "lattice", "lme4", "magick", "manipulateWidget", "MASS", "Matrix", "matrixStats", "mgcv", "mime", "multcomp", "mvtnorm", "nnet", "np", "openssl", "openxlsx", "optimx", "packrat", "parallelly", "parameters", "pcaPP", "performance", "pkgload", "plotly", "proxy", "psych", "quantreg", "R6", "raster", "rbibutils", "Rcpp", "RcppArmadillo", "RcppParallel", "Rdpack", "readr", "rgl", "rio", "rJava", "rmarkdown", "robustbase", "rootSolve", "rsconnect", "Rttf2pt1", "RVAideMemoire", "rvest", "sandwich", "sass", "segmented", "seqinr", "sf", "showtext", "sjlabelled", "sjmisc", "sjPlot", "spatial", "spData", "spdep", "splancs", "statmod", "stringi", "styler", "survey", "survival", "sysfonts", "systemfonts", "testthat", "tibble", "tidyselect", "tinytex", "TMB", "tweenr", "units", "utf8", "V8", "vctrs", "viridis", "viridisLite", "waldo", "withr", "wooldridge", "xfun", "XML", "zip"))
?geom_col
library(ggplot2)
?geom_col
acos(0.8)
(pi*0.6435011)/180
(180*0.6435011)/pi
acos(0.4)
(180*1.159279)/pi
n<-220*sqrt(2)
d<-2*pi*60*1.3*1.5*10^(-3)
n/d
(n/d)*400/220
424*400/220
800/1.4
1.4*571
1.3*571
275/1.1
500*0.45/424
1.4*1.5
1.3*1.5
500*0.45
sqrt(4/8)
1/sqrt(2)
8*10^2
8*12^2
(1/sqrt(2))^2
120/8
4*15^2
0.746*1.25
7.46*1.25
9.325/(sqrt(3)*380)
90-36.87
380/13800*14.167
500/(sqrt(3)*13800*0.4)
380/13800*0.01416
1024*1,1
1024*1.1
library(berryFunctions)
library(geometry)
library(maptools);
library(raster);
library(geoR);
library(rgdal)
library(dplyr)
d <- c(-1,1)
pc <- as.matrix(rbind(expand.grid(d,d,d),0))
tc <- delaunayn(pc)
# example tetramesh
## Not run:
rgl::rgl.viewpoint(60)
rgl::rgl.light(120,60)
tetramesh(tc,pc, alpha=0.9)
tc1 <- delaunayn(pc, output.options="Fa")
## sum of generalised areas is total volume of cube
sum(tc1$areas)
60/0.1667
1667/10000
60/0.1667
360/pi
sqrt(114.5916)
pi*(10.70^2)
360/120
120/0.036
y<-0.18
x<-1.3-0.7
k<-(26.4-33.2)/(1.3-0.7)
235*5/10
?file.open
?file.choose
a<-c(3,0,TRUE)
b<-c(4,0,FALSE)
c<-(a|b)
c
format(as.POSIXct("Sep-282019 07:54:31 AM UTC",format='%b-%d-%Y'))
?upper.diag
a<-list('10',TRUE,5.6)
is.list(a{1])
is.list(a[1])
is.character(a[1])
v<-1:3
names(v)<-c('a','b','c')
v[4]<-4
names(v[4])
library(DescTools)
deliver<-aggregate(count,by=list(area,driver),FUN=mean)
attach(d.pizza)
deliver<-aggregate(count,by=list(area,driver),FUN=mean)
x<-c(12L,6L,10L,8L,15L,14L,19L,18L,23L,59L)
median(x)
class(median(x))
?rownum
300/8
20*300
0.25*8
0.25*8+2*2+5*0.1
2*2+5*0.1
15.65*40
470/15.65
(470/15.65)/24
(470/15.65)/8
15.65*40*4.5
279/12/7
279/7
install.packages("openxlsx")
install.packages("openxlsx2")
R.version
library(xtable)
RStudio.Version()
setwd("~/GitHub/Krober_Analytica/6 - Exploratory Analysis/Project 2")
dados<-openxlsx::read.xlsx('Base_regressao_20_10.xlsx', sheet= 'inativos')
View(dados)
dados$DATA_CADA<-as.Date(dados$DATA_CADA)
dados<-read_xlsx('Base_regressao_20_10.xlsx',sheet = "inativos",col_types = c('numeric',
'numeric',
'numeric',
'numeric',
'date',
'numeric',
'date',
'date',
"text",
'numeric',
'text',
'numeric',
'numeric',
'numeric',
'date',
'text',
'numeric',
'numeric',
'numeric',
'numeric',
'text',
'text',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'text'))
library(readxl)
dados<-read_xlsx('Base_regressao_20_10.xlsx',sheet = "inativos",col_types = c('numeric',
'numeric',
'numeric',
'numeric',
'date',
'numeric',
'date',
'date',
"text",
'numeric',
'text',
'numeric',
'numeric',
'numeric',
'date',
'text',
'numeric',
'numeric',
'numeric',
'numeric',
'text',
'text',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'numeric',
'text'))
View(dados)
data<-janitor::clean_names(dados)
names(data)
data$resu_cons_titu<-as.factor(data$resu_cons_titu)
data$tipo_titu<-as.factor(data$tipo_titu)
data$segmento<-as.factor(data$segmento)
data$nicho<-as.factor(data$nicho)
data$fraudador<-as.factor(data$fraudador)
data$city<-as.factor(data$cida)
data$tranche<-as.factor(data$tranche)
data$fili_id<-as.factor(data$fili_id)
data_num<- data %>%
dplyr::select(fraudador,resu_cons_titu,idade_clie,
concen_saca,tranche,prorro_liqui,recomp_liqui,
perc_desc,tb_bord_perc_desc,valo_scon,limi_cred,valo_titu_orig,tipo_titu)
library(dplyr)
library(xtable)
library(ggplot2)
library(ROCR)
library(janitor)
data_num<- data %>%
dplyr::select(fraudador,resu_cons_titu,idade_clie,
concen_saca,tranche,prorro_liqui,recomp_liqui,
perc_desc,tb_bord_perc_desc,valo_scon,limi_cred,valo_titu_orig,tipo_titu)
data_num<-as.data.frame(data_num)
row.names(data_num)<-data$titu_id
data<-data_num
chisq.test(table(data_num$FRAUDADOR,data_num$RESU_CONS_TITU))
chisq.test(table(data_num$fraudador,data_num$resu_cons_titu))
table(data_num$fraudador,data_num$resu_cons_titu)
?pairwise_chisq_test
??pairwise_chisq_test
# Análise exploratória
library(ggstatsplot)
library(Hmisc)
library(vcdExtra)
library(rmngb)
?pairwise_chisq_test
??pairwise_chisq_test
tab<-table(data_num$fraudador,data_num$resu_cons_titu)
pairwise_chisq_gof_test(tab, p.adjust.method = "holm")
library(rstatix)
pairwise_chisq_gof_test(tab, p.adjust.method = "holm")
pairwise_chisq_gof_test(as.matrix(tab), p.adjust.method = "fdr")
pwft<-rstatix::pairwise_fisher_test(as.matrix(tab), p.adjust.method = "fdr")
pwft
pwcst<-pairwise_chisq_gof_test(as.matrix(tab), p.adjust.method = "fdr")
pwcst
tab<-table(data$fraudador,data$resu_cons_titu);tab
tab<-table(data$resu_cons_titu,data$fraudador);tab
fisher.test(tab)
chisq.test(tab)
pwft<-rstatix::pairwise_fisher_test(as.matrix(tab), p.adjust.method = "fdr");pwft
library(ggstatsplot)
ggbarstats(
data, fraudador, resu_cons_titu,
results.subtitle = FALSE)
tab<-table(data$tranche,data$fraudador);tab
chisq.test(tab)
ggbarstats(
data, fraudador, tranche,
results.subtitle = FALSE)
44/487
44/200
487-44
443/2
44/244
44/224
20/100
400*50
install.packages("plotly")
library(plotly)
#básico
graf = plot_ly(data = iris, x = ~Sepal.Length, y = ~Sepal.Width,  type ="scatter" ,
mode   = 'markers')
graf
graf = plot_ly(data = iris, x = ~Sepal.Length, y = ~Sepal.Width, color = ~Species, type ="scatter" ,
mode   = 'markers')
graf
install.packages("treemap")
library(treemap)
#copiamos a váriavel
usarrests = USArrests
#linha para coluna
usarrests['states'] = rownames(USArrests)
#Assault
treemap(usarrests, index = c('states'), vSize = 'Assault', title = "Assaltos nos EUA")
#murder
treemap(usarrests, index = c('states'), vSize = 'Murder', title = "Assasinatos nos EUA")
#transforma em Data Frame
titanic = as.data.frame(Titanic)
titanic
#por classe
treemap(titanic, index = c('Class','Survived'), vSize = 'Freq', title = "Titanic: Sobreviventes")
#por classe e sexo
treemap(titanic, index = c('Age','Survived'), vSize = 'Freq', title = "Titanic: Sobreviventes")
library(plotly)
library(gapminder)
graf = plot_ly(data = iris, x = ~Sepal.Length, y = ~Sepal.Width,  type ="scatter" ,
mode   = 'markers',  frame = ~Species )
graf
graf = plot_ly(data = gapminder, x = ~lifeExp, y = ~pop,  type ="scatter" , color = ~continent,
mode   = 'markers', text=~country  , frame = ~year )
graf
#gapminder
data<-gapminder
names(data)
unique(data$country)
data<-subset(data,!country=="China")
graf = plot_ly(data = gapminder, x = ~lifeExp, y = ~pop,  type ="scatter" , color = ~continent,
mode   = 'markers', text=~country  , frame = ~year )
graf
#gapminder
data<-gapminder
data<-subset(data,!country=="China")
graf = plot_ly(data = data, x = ~lifeExp, y = ~pop,  type ="scatter" , color = ~continent,
mode   = 'markers', text=~country  , frame = ~year )
graf
graf = plot_ly(data = data, x = ~lifeExp, y = ~pop,  type ="scatter" , color = ~continent,
mode   = 'markers', text=~country  , frame = ~year )
data<-subset(data,!country %in% c("China","India"))
graf = plot_ly(data = data, x = ~lifeExp, y = ~pop,  type ="scatter" , color = ~continent,
mode   = 'markers', text=~country  , frame = ~year )
graf
gapm = gapminder[ gapminder$continent=='Americas',]
graf = plot_ly(data = gapm, x = ~lifeExp, y = ~pop,  type ="scatter" , color = ~country,
mode   = 'markers', text=~country  , frame = ~year )
graf
